empty_df <- glm(booking_status ~ 1, family = binomial(link = "logit"), data=hotel_train)
summary(empty_df)
lgm_step_for <- step(empty_df, scope=list(lower=formula(empty_df),upper=formula(logistic_model)), direction="forward")
formula(lgm_step_for)
formula(lgm_step)
phatlogistic4  <-  predict(lgm_step_for, hotel_test[,-17],type="response")
yhatlogistic4 <- ifelse(phatlogistic4  <0.5,0,1)
sum(yhatlogistic4  != hotel_test$booking_status)/length(hotel_test$booking_status)
##### RANDOM FOREST
library(randomForest)
rf_hotel <- randomForest(booking_status ~., data=hotel_train,
importance=TRUE)
plot(rf_hotel)
## Check Important variables
importance(rf_hotel)
## There are two types of importance measure
##  (1=mean decrease in accuracy,
##   2= mean decrease in node impurity)
importance(rf_hotel, type=2)
varImpPlot(rf_hotel)
rf_hotel.pred = predict(rf_hotel, hotel_test, type='class')
table(rf_hotel.pred, hotel_test$booking_status)
mean(rf_hotel.pred != y2)
library(gbm)
### NEED TO CHANGE RESPONSE VARIABLE TO NUMERIC FOR BOOSTING TO WORK
hotel_train$booking_status <- as.numeric(as.character(hotel_train$booking_status))
hotel_test$booking_status <- as.numeric(as.character(hotel_test$booking_status))
gbm.hotel <- gbm(booking_status ~ .,data = hotel_train,
distribution = 'bernoulli',
n.trees = 5000,
shrinkage = 0.01,
interaction.depth = 3,
cv.folds = 10)
## Model Inspection
## Find the estimated optimal number of iterations
perf_gbm1 = gbm.perf(gbm.hotel, method="cv")
perf_gbm1
## summary model
## Which variances are important
par(mar = c(5, 11, 1, 1))
summary(gbm.hotel, cBars = 5, las = 2)
## Training error
pred1gbm <- predict(gbm.hotel,newdata = hotel_train, n.trees=perf_gbm1, type="response")
pred1gbm[1:10]
y1hat <- ifelse(pred1gbm < 0.5, 0, 1)
y1hat[1:10]
sum(y1hat != y1)/length(y1)  ##Training error =  0.1308685
## Testing Error
y2hat <- ifelse(predict(gbm.hotel,newdata = hotel_test[,-17], n.trees=perf_gbm1, type="response") < 0.5, 0, 1)
mean(y2hat != y2)
#### Naive Bayes (with full X). Testing error(switched back to factor response) = 0.4567429
library(e1071)
modC <- naiveBayes(as.factor(booking_status) ~. , data = hotel_train)
y2hatC <- predict(modC, newdata = hotel_test)
mean( y2hatC != y2)
#### Generalized additive model (GAM) with splines:
library(gam)
modD <- gam( booking_status ~ . ,
family = binomial, data= hotel_train, trace=TRUE)
y2hatDprob <- predict(modD, hotel_test[,-17],type="response")
y2hatD <- ifelse(y2hatDprob <0.5,0,1)
sum(y2hatD != y2)/length(y2)
###added splines to existing variables for all those variables that allowed smoothing s()
modX = gam (booking_status ~ . + s(no_of_adults) + s(no_of_children) + s(no_of_weekend_nights) + s(no_of_week_nights) + s(no_of_previous_cancellations) + s(lead_time) + s(no_of_previous_bookings_not_canceled) + s(avg_price_per_room) + s(no_of_special_requests), family = binomial, data= hotel_train, trace=TRUE)
y2hatDprob2 <- predict(modX, hotel_test[,-17],type="response")
y2hatD2 <- ifelse(y2hatDprob2 <0.5,0,1)
sum(y2hatD2 != y2)/length(y2)
#####  a single Tree testing error (same for numeric or factor response): 0.1763882
library(rpart)
modE0 <- rpart(booking_status ~ .,data=hotel_train, method="class",
parms=list(split="gini"))
rpart.plot(modE0)
opt <- which.min(modE0$cptable[, "xerror"]);
cp1 <- modE0$cptable[opt, "CP"];
modE <- prune(modE0,cp=cp1);
y2hatE <-  predict(modE, hotel_test[,-17],type="class")
mean(y2hatE != y2)
#<<<<<<< Updated upstream
## another way to grow tree #2 using information instead of gini with same results
modE1 <- rpart(booking_status ~ .,data=hotel_train, method="class", parms=list(split="information"))
rpart.plot(modE1)
opt2 <- which.min(modE1$cptable[, "xerror"]);
cp2 <- modE1$cptable[opt2, "CP"];
modE2 <- prune(modE1,cp=cp2);
y2hatE <-  predict(modE, hotel_test[,-17],type="class")
mean(y2hatE != y2)
#=======
################### Random Forest #################
# split data to train and test
set.seed(7406)
n <- nrow(hotel_df2)
n1 <- round(n/10)
# split into train and test
index <- sort(sample(n,n1))
hotel_train <- hotel_df2[-index,]
response_train <- hotel_train[,'booking_status']
hotel_test <- hotel_df2[index,]
response_test <- hotel_test[,'booking_status']
model_rf_df <- data.frame()
ntrees <- c(500,1000,1500)
mtry <- c(5,10,15)
# fitting the best model again for plotting
rf_rfPackage <- randomForest(as.factor(booking_status)~.,
hotel_train,
ntree = 1500,
mtry=5,
importance=TRUE)
# fitting the best model again for plotting
rf_rfPackage <- randomForest(as.factor(booking_status)~.,
hotel_train,
ntree = 1500,
mtry=5,
importance=TRUE)
importance(rf_rfPackage,type = 2)
varImpPlot(rf_rfPackage)
rf_rfPackage_pred <- predict(rf_rfPackage, hotel_test, type="class")
mean_err <- mean(response_test!=rf_rfPackage_pred)
mean_err
##### CARET with Crossvalidation only on the training set.
##### createDataPartition supposed to be better at splitting training and test (tries to optimize split) than Sample function
####https://daviddalpiaz.github.io/r4sl/the-caret-package.html
library(caret)
# [1] 0.09619625
# lead time is the most important variable
# no of special requests, and average price per room are the
# second and third most important variables
imp <- varImpPlot(rf_rfPackage)
imp <- as.data.frame(imp)
imp$varnames <- rownames(imp)
rownames(imp) <- NULL
imp %>% arrange(desc(MeanDecreaseAccuracy)) %>%
head(5) %>%
ggplot(aes(x=reorder(varnames,MeanDecreaseAccuracy),y = MeanDecreaseAccuracy)) +
geom_point() +
geom_segment(aes(x=varnames,xend=varnames,y=0,yend=MeanDecreaseAccuracy,
color = rgb(179, 163, 105,maxColorValue = 255))) +
geom_point(color = rgb(0, 48, 87,maxColorValue = 255),size=2) +
scale_color_identity() +
ylab("Mean Decrease Accuracy") +
xlab("") +
ggtitle("Random Forest Variable Importance") +
coord_flip() + theme(panel.background = element_blank(),
axis.text.y=element_text(size=15))
# Plot for Variable importance for gbm hotel
gbm.hotel.plot <- summary(gbm.hotel)
rownames(gbm.hotel.plot) <- NULL
gbm.hotel.plot %>% arrange(desc(rel.inf)) %>%
head(5) %>%
ggplot(aes(x=reorder(var,rel.inf),y = rel.inf)) +
geom_point() +
geom_segment(aes(x=var,xend=var,y=0,yend=rel.inf,
color = rgb(179, 163, 105,maxColorValue = 255))) +
geom_point(color = rgb(0, 48, 87,maxColorValue = 255),size=2) +
scale_color_identity() +
ylab("Relative Imporance") +
xlab("") +
ggtitle("Gradient Boosting Variable Importance") +
coord_flip() + theme(panel.background = element_blank(),
axis.text.y=element_text(size=15))
ggsave('GBMVariable_Imporance.jpg')
imp %>% arrange(desc(MeanDecreaseAccuracy)) %>%
head(5) %>%
ggplot(aes(x=reorder(varnames,MeanDecreaseAccuracy),y = MeanDecreaseAccuracy)) +
geom_point() +
geom_segment(aes(x=varnames,xend=varnames,y=0,yend=MeanDecreaseAccuracy,
color = rgb(179, 163, 105,maxColorValue = 255))) +
geom_point(color = rgb(0, 48, 87,maxColorValue = 255),size=2) +
scale_color_identity() +
ylab("Mean Decrease Accuracy") +
xlab("") +
ggtitle("Random Forest Variable Importance") +
coord_flip() + theme(panel.background = element_blank(),
axis.text.y=element_text(size=15))
ggsave('RFVariable_Imp.jpg')
imp %>% arrange(desc(MeanDecreaseAccuracy)) %>%
head(5) %>%
ggplot(aes(x=reorder(varnames,MeanDecreaseAccuracy),y = MeanDecreaseAccuracy)) +
geom_point() +
geom_segment(aes(x=varnames,xend=varnames,y=0,yend=MeanDecreaseAccuracy,
color = rgb(179, 163, 105,maxColorValue = 255))) +
geom_point(color = rgb(0, 48, 87,maxColorValue = 255),size=2) +
scale_color_identity() +
ylab("Mean Decrease Accuracy") +
xlab("") +
ggtitle("Random Forest Top 5 Variables") +
coord_flip() + theme(panel.background = element_blank(),
axis.text.y=element_text(size=15))
ggsave('RFVariable_Imp.jpg')
gbm.hotel.plot %>% arrange(desc(rel.inf)) %>%
head(5) %>%
ggplot(aes(x=reorder(var,rel.inf),y = rel.inf)) +
geom_point() +
geom_segment(aes(x=var,xend=var,y=0,yend=rel.inf,
color = rgb(179, 163, 105,maxColorValue = 255))) +
geom_point(color = rgb(0, 48, 87,maxColorValue = 255),size=2) +
scale_color_identity() +
ylab("Relative Imporance") +
xlab("") +
ggtitle("Gradient Boosting Top 5 Variables") +
coord_flip() + theme(panel.background = element_blank(),
axis.text.y=element_text(size=15))
ggsave('GBMVariable_Imporance.jpg')
# Install packages and Import Libraries
if (!require(dplyr)) install.packages("dplyr")
library(dplyr)
if (!require(lubridate)) install.packages("lubridate")
library(lubridate)
if (!require(sqldf)) install.packages("sqldf")
library(sqldf)
if (!require(ggplot2)) install.packages("ggplot2")
library(ggplot2)
if (!require(ggthemes)) install.packages("ggthemes")
library(ggthemes)
if (!require(gridExtra)) install.packages("gridExtra")
library(gridExtra)
# read in data
fraud_data_dropbox_link <- 'https://www.dropbox.com/s/qiivkj6ncp3ryzj/Fraud_Data.csv?dl=1'
ip_address_dropbox_link <- 'https://www.dropbox.com/s/ww7k7p4afuclenu/IpAddress_to_Country.csv?dl=1'
fraud_data <- read.csv(fraud_data_dropbox_link)
head(fraud_data)
dim(fraud_data)
ip_address_data <- read.csv(ip_address_dropbox_link)
head(ip_address_data,15)
dim(ip_address_data)
glimpse(fraud_data)
## We are working with an imbalance dataset
barplot(prop.table(table(fraud_data$class)),
col = rainbow(2),
ylim = c(0, 1),
main = "Class Distribution")
## vis better ##
barplot(prop.table(table(fraud_data$class)),
col = c('#B3A369','#003057'),
ylim = c(0, 1),
main = "Class Distribution")
##
is.null(fraud_data)
# Change categorical variables to factors
fraud_data$source <- as.factor(fraud_data$source)
fraud_data$browser <- as.factor(fraud_data$browser)
fraud_data$sex <- as.factor(fraud_data$sex)
str(fraud_data)
# Change date variables to Date datatype
fraud_data$signup_time <- ymd_hms(fraud_data$signup_time)
fraud_data$purchase_time <- ymd_hms(fraud_data$purchase_time)
fraud_data %>% group_by(user_id) %>%
mutate(count = n()) %>%
select(user_id,count) %>%
filter(count > 1 )
# create variable to show purchases within 24 hours of signup
fraud_data <- fraud_data %>%
mutate(conversion_time = purchase_time - signup_time) %>%
mutate(same_day_purchase = ifelse(conversion_time <= 86400,1,0))
# Create a weekday variable (Week starts on Sunday )
fraud_data$weekday_purchase <- as.factor(wday(fraud_data$purchase_time, label=TRUE, abbr=FALSE))
fraud_data$weekend_purchase <- as.factor(ifelse(fraud_data$weekday_purchase == 'Saturday','Weekend',ifelse(fraud_data$weekday_purchase == 'Sunday','Weekend',ifelse(fraud_data$weekday_purchase == 'Friday','Weekend','Weekday'))))
fraud_data$Age_range <- as.factor(ifelse(fraud_data$age <= 30,'young',ifelse(fraud_data$age >= 30 & fraud_data$age <= 50,'middle_aged','senior')))
fraud_data$month_purchase <- as.factor(month(fraud_data$purchase_time, label=TRUE, abbr=FALSE))
fraud_data$class <- as.factor(fraud_data$class)
fraud_data$purchase_hour <- as.numeric(format(as.POSIXct(fraud_data$purchase_time ), format = "%H"))
fraud_data$purchase_moment <- as.factor(ifelse(fraud_data$purchase_hour >= 5 & fraud_data$purchase_hour <= 12, 'morning',
ifelse(fraud_data$purchase_hour >= 12 &  fraud_data$purchase_hour <= 17, 'afternoon',
ifelse(fraud_data$purchase_hour >= 17 &  fraud_data$purchase_hour <= 20, 'Evening','Night'))))
head(fraud_data)
glimpse(fraud_data)
fraud_data <- fraud_data %>%
mutate(seo = ifelse(source == 'SEO',1,0)) %>%
mutate(ads = ifelse(source=='Ads',1,0)) %>%
mutate(chrome = ifelse(browser == 'Chrome',1,0)) %>%
mutate(opera = ifelse(browser == 'Opera',1,0)) %>%
mutate(safari = ifelse(browser == 'Safari',1,0)) %>%
mutate(ie = ifelse(browser == 'IE',1,0)) %>%
mutate(male = ifelse(sex == 'M',1,0)) %>%
mutate(young = ifelse(age < 30, 1,0)) %>%
mutate(middle_aged = ifelse(age >= 30 & age <= 50,1,0)) %>%
mutate(Saturday = ifelse(weekday_purchase == 'Saturday',1,0)) %>%
mutate(Monday = ifelse(weekday_purchase == 'Monday',1,0)) %>%
mutate(Tuesday = ifelse(weekday_purchase == 'Tuesday',1,0)) %>%
mutate(Wednesday = ifelse(weekday_purchase == 'Wednesday',1,0)) %>%
mutate(Thrusday = ifelse(weekday_purchase == 'Thrusday',1,0)) %>%
mutate(Friday = ifelse(weekday_purchase == 'Friday',1,0)) %>%
mutate(weekend = ifelse(weekend_purchase == 'Weekend',1,0)) %>%
mutate(Night = ifelse(purchase_moment == 'night',1,0))  %>%
mutate(afternoon = ifelse(purchase_moment == 'afternoon',1,0))   %>%
mutate(evening = ifelse(purchase_moment == 'Evening',1,0))
head(fraud_data)
glimpse(fraud_data)
b1 <- ggplot(fraud_data, aes(x = as.factor(class),
y = purchase_value)) +
geom_boxplot(aes(group = class,
fill = as.factor(class)) ,
show.legend = FALSE ) +
xlab( 'Transaction outcome' ) + ylab( 'Purchase Value' ) +
theme_gdocs() + scale_fill_manual(values = c('#B3A369','#D6DBD4'))
b2 <- ggplot(fraud_data, aes(x = as.factor(class),
y = conversion_time)) +
geom_boxplot(aes(group = class,
fill = as.factor(class)) ,
show.legend = FALSE ) +
xlab( 'Transaction outcome' ) + ylab( 'Conversion Time' ) +
theme_gdocs() + scale_fill_manual(values = c('#B3A369','#D6DBD4'))
ggplot(fraud_data, aes(x = as.factor(class),
y = age)) +
geom_boxplot(aes(group = class,
fill = as.factor(class)) ,
show.legend = FALSE ) +
xlab( 'Transaction outcome' ) + ylab( 'Age' ) +
theme_gdocs() + scale_fill_tableau('Tableau 10')
## install required libraries
if (!require(dplyr)) install.packages("dplyr")
library(dplyr)
if (!require(lubridate)) install.packages("lubridate")
library(lubridate)
if (!require(corrplot)) install.packages("corrplot")
library(corrplot)
if (!require(ggplot2)) install.packages("ggplot2")
library(ggplot2)
if (!require(ggthemes)) install.packages("ggthemes")
library(ggthemes)
if (!require(gridExtra)) install.packages("gridExtra")
library(gridExtra)
library(lubridate)
if (!require(tidyr)) install.packages("tidyr")
library(tidyr)
if (!require(scatterPlotMatrix))install.packages('scatterPlotMatrix')
library(scatterPlotMatrix)
#<<<<<<< Updated upstream
if (!require(rpart.plot))install.packages("rpart.plot")
library(rpart.plot)
#=======
if (!require(randomForest))install.packages('randomForest')
library(randomForest)
#>>>>>>> Stashed changes
if (!require(RANN))install.packages("RANN")
# Read in dataset
hotel_df_raw <- read.csv('Hotel Reservations.csv',header = TRUE)
head(hotel_df_raw)
glimpse(hotel_df_raw)
# Read in dataset
hotel_df_raw <- read.csv('Hotel Reservations.csv',header = TRUE)
head(hotel_df_raw)
# clean up non leap year leap days
hotel_df <- hotel_df_raw %>% mutate(date_of_arrival = paste0(arrival_month,'-',arrival_date,'-',arrival_year))
hotel_df$date_of_arrival <- ifelse(hotel_df$date_of_arrival == "2-29-2018" ,"02-28-2018",hotel_df$date_of_arrival)
hotel_df$date_of_arrival <- mdy(hotel_df$date_of_arrival)
# convert columns some character variables into categorical variables
hotel_df$type_of_meal_plan <- as.factor(hotel_df$type_of_meal_plan)
hotel_df$required_car_parking_space <- as.factor(hotel_df$required_car_parking_space)
hotel_df$room_type_reserved <- as.factor(hotel_df$room_type_reserved)
hotel_df$market_segment_type <- as.factor(hotel_df$market_segment_type)
hotel_df$repeated_guest <- as.factor(hotel_df$repeated_guest)
hotel_df$booking_status <- as.factor(hotel_df$booking_status)
hotel_df$date_of_arrival2 = as.POSIXct(hotel_df$date_of_arrival,format="%Y-%m-%d")
## define breaks & labels
breaks = c("2016-12-01", "2017-03-01", "2017-06-01", "2017-09-01", "2017-12-01", "2018-03-01", "2018-06-01", "2018-09-01", "2018-12-01", "2019-03-01")
labels = c("winter", "spring", "summer", "fall", "winter", "spring", "summer", "fall", "winter")
hotel_df["season"] = cut(hotel_df$date_of_arrival2, breaks=as.POSIXct(breaks), labels=labels)
hotel_df$season <- as.factor(hotel_df$season)
#ADD group_size and total no_of_nights for exploratory purposes
hotel_df["group_size"] = hotel_df$no_of_adults + hotel_df$no_of_children
hotel_df["no_of_nights"] = hotel_df$no_of_weekend_nights + hotel_df$no_of_week_nights
#FINAL SELECTION OF VARIABLES.  booking_status: if cancelled = 1 in not cancelled = 0
hotel_df2 <- hotel_df[,c(2:10,13:19,22)]
hotel_df2 <- hotel_df2 %>% mutate(booking_status = as.factor(ifelse(hotel_df$booking_status == 'Canceled',1,0)))
hotel_df2 = hotel_df2 %>% relocate(season, .before=booking_status)
str(hotel_df2)
glimpse(hotel_df2)
str(hotel_df2)
summary(hotel_df2)
summary(hotel_df_raw)
## install required libraries
if (!require(dplyr)) install.packages("dplyr")
library(dplyr)
if (!require(lubridate)) install.packages("lubridate")
library(lubridate)
if (!require(corrplot)) install.packages("corrplot")
library(corrplot)
if (!require(ggplot2)) install.packages("ggplot2")
library(ggplot2)
if (!require(ggthemes)) install.packages("ggthemes")
library(ggthemes)
if (!require(gridExtra)) install.packages("gridExtra")
library(gridExtra)
# Read in dataset
hotel_df_raw <- read.csv('Hotel Reservations.csv',header = TRUE)
head(hotel_df_raw)
# clean up non leap year leap days
hotel_df <- hotel_df_raw %>% mutate(date_of_arrival = paste0(arrival_month,'-',arrival_date,'-',arrival_year))
hotel_df$date_of_arrival <- ifelse(hotel_df$date_of_arrival == "2-29-2018" ,"02-28-2018",hotel_df$date_of_arrival)
hotel_df$date_of_arrival <- mdy(hotel_df$date_of_arrival)
# convert columns some character variables into categorical variables
hotel_df$type_of_meal_plan <- as.factor(hotel_df$type_of_meal_plan)
hotel_df$required_car_parking_space <- as.factor(hotel_df$required_car_parking_space)
hotel_df$room_type_reserved <- as.factor(hotel_df$room_type_reserved)
hotel_df$market_segment_type <- as.factor(hotel_df$market_segment_type)
hotel_df$repeated_guest <- as.factor(hotel_df$repeated_guest)
hotel_df$booking_status <- as.factor(hotel_df$booking_status)
hotel_df_vis <- hotel_df %>% mutate(mealplan_1 = as.factor(ifelse(hotel_df$type_of_meal_plan == 'Meal Plan 1',1,0))) %>%
mutate(mealplan_2 = as.factor(ifelse(hotel_df$type_of_meal_plan == 'Meal Plan 2',1,0))) %>%
mutate(mealplan_3 = as.factor(ifelse(hotel_df$type_of_meal_plan == 'Meal Plan 3',1,0))) %>%
mutate(online_booking = as.factor(ifelse(hotel_df$market_segment_type == 'Online',1,0))) %>%
mutate(corporate_booking = as.factor(ifelse(hotel_df$market_segment_type == 'Corporate',1,0))) %>%
mutate(aviation_booking = as.factor(ifelse(hotel_df$market_segment_type == 'Aviation',1,0))) %>%
mutate(complementary_booking = as.factor(ifelse(hotel_df$market_segment_type == 'Complementary',1,0))) %>%
mutate(booking_status_y = as.factor(ifelse(hotel_df$booking_status == 'Canceled',1,0))) %>%
mutate(day_of_week = as.factor(wday(date_of_arrival, label=TRUE, abbr=FALSE))) %>%
mutate(weekend_arrival = as.factor(ifelse(day_of_week == 'Friday' | day_of_week == 'Saturday' | day_of_week == 'Sunday',1,0))) %>%
mutate(Saturday = ifelse(day_of_week == 'Saturday',1,0)) %>%
mutate(Monday = ifelse(day_of_week == 'Monday',1,0)) %>%
mutate(Tuesday = ifelse(day_of_week == 'Tuesday',1,0)) %>%
mutate(Wednesday = ifelse(day_of_week == 'Wednesday',1,0)) %>%
mutate(Thursday = ifelse(day_of_week == 'Thursday',1,0)) %>%
mutate(Friday = ifelse(day_of_week == 'Friday',1,0))
required_cols <-  c('no_of_adults',
'no_of_children',
'no_of_weekend_nights',
'no_of_week_nights',
'required_car_parking_space',
'room_type_reserved',
'lead_time',
'date_of_arrival',
'day_of_week',
'weekend_arrival',
'Monday',
'Tuesday',
'Wednesday',
'Thursday',
'Friday',
'Saturday',
'repeated_guest',
'no_of_previous_cancellations',
'no_of_previous_bookings_not_canceled',
'avg_price_per_room',
'no_of_special_requests',
'mealplan_1',
'mealplan_2',
'mealplan_3',
'market_segment_type',
'online_booking',
'corporate_booking',
'aviation_booking',
'complementary_booking',
'booking_status_y'
)
hotel_df_final <- hotel_df_vis[,required_cols]
glimpse(hotel_df_final)
dim(hotel_df_raw)
glimpse(hotel_df_raw)
no_of_bookings_across_market <- ggplot(hotel_df_vis, aes(x=booking_status,fill=market_segment_type)) +
geom_bar(position="dodge") +ggtitle('Number Of Bookings Across Market Segment') +
xlab('Booking Status') + ylab('Number of Bookings') +
theme_gdocs() + scale_fill_manual(values = c(rgb(179, 163, 105,maxColorValue = 255)
,rgb(0, 48, 87,maxColorValue = 255)
,rgb(133, 116, 55,maxColorValue = 255)
,rgb(23, 21, 67,maxColorValue = 255)
,rgb(214, 219, 212,maxColorValue = 255)))
?randomForest
View(train)
View(train)
nrow(train)
nrow(test)
# Install packages and Import Libraries
if (!require(dplyr)) install.packages("dplyr")
library(dplyr)
if (!require(lubridate)) install.packages("lubridate")
library(lubridate)
if (!require(sqldf)) install.packages("sqldf")
library(sqldf)
if (!require(ggplot2)) install.packages("ggplot2")
library(ggplot2)
if (!require(ggthemes)) install.packages("ggthemes")
library(ggthemes)
if (!require(gridExtra)) install.packages("gridExtra")
library(gridExtra)
if (!require(themis)) install.packages("themis")
library(themis)
if (!require(caret)) install.packages("caret")
library(caret)
set.seed(123)
# change this
#setwd("C:/Users/aleja/Desktop/maestria/202301_spring/project/Team-36")
setwd('https://www.dropbox.com/scl/fo/ypgzybot99te63nnn77p3/h?dl=0&rlkey=qi7prnrvoggjgqhdbg31a2age')
?setwd
??dropbox_put
# change this
#setwd("C:/Users/aleja/Desktop/maestria/202301_spring/project/Team-36")
dropbox_link_for_wd <- 'https://www.dropbox.com/scl/fo/ypgzybot99te63nnn77p3/h?dl=0&rlkey=qi7prnrvoggjgqhdbg31a2age'
setwd(dropbox_link_for_wd)
test_link <- '/Users/vaisagradhakrishnan/Desktop/Github/Team-36'
setwd(test_link)
# change this
#setwd("C:/Users/aleja/Desktop/maestria/202301_spring/project/Team-36")
dropbox_link_for_wd <- 'https://www.dropbox.com/scl/fo/ypgzybot99te63nnn77p3/h?dl=0&rlkey=qi7prnrvoggjgqhdbg31a2age'
setwd(dropbox_link_for_wd)
setwd("~/Desktop/Github/Team-36/Code")
# change this
#setwd("C:/Users/aleja/Desktop/maestria/202301_spring/project/Team-36")
dropbox_link_for_wd <- 'https://www.dropbox.com/scl/fo/ypgzybot99te63nnn77p3/h?dl=0&rlkey=qi7prnrvoggjgqhdbg31a2age'
setwd(dropbox_link_for_wd)
current_path <- getActiveDocumentContext()$path
library(rstudioapi)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
dirname(current_path)
current_path
owd
pwd
setwd("~/Desktop/Github/Team-36/Code")
current_path <- getActiveDocumentContext()$path
current_path
dirname(dropbox_link_for_wd)
?dirname
